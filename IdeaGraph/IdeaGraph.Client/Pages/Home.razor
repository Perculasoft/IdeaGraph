@page "/"
@using IdeaGraph.Client.Models
@using IdeaGraph.Client.Services
@inject IdeaService IdeaService
@rendermode InteractiveAuto

<PageTitle>Home - IdeaGraph</PageTitle>

<div class="container-fluid mt-4">
    <h1 class="mb-4">IdeaGraph</h1>

    <!-- Form to create new idea -->
    <div class="card mb-4">
        <div class="card-header">
            <h3>Create New Idea</h3>
        </div>
        <div class="card-body">
            <EditForm Model="@newIdea" OnValidSubmit="@HandleCreateIdea">
                <div class="mb-3">
                    <label for="title" class="form-label">Title</label>
                    <InputText id="title" class="form-control" @bind-Value="newIdea.Title" placeholder="Enter idea title" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description</label>
                    <InputTextArea id="description" class="form-control" @bind-Value="newIdea.Description" rows="3" placeholder="Enter idea description" />
                </div>
                <div class="mb-3">
                    <label for="tags" class="form-label">Tags</label>
                    <div class="tags-input-container">
                        <div class="tags-chips">
                            @foreach (var tag in newIdea.Tags)
                            {
                                <span class="tag-chip">
                                    @tag
                                    <button type="button" class="tag-remove" @onclick="() => RemoveTag(tag)">×</button>
                                </span>
                            }
                        </div>
                        <input type="text" 
                               class="form-control mt-2" 
                               @bind="currentTag" 
                               @onkeydown="HandleTagInput"
                               placeholder="Type tag and press Enter or comma" />
                    </div>
                </div>
                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-primary" disabled="@isCreating">
                        @if (isCreating)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Creating...</span>
                        }
                        else
                        {
                            <span>Create Idea</span>
                        }
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="ResetForm">Clear</button>
                </div>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3" role="alert">
                        @errorMessage
                    </div>
                }
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success mt-3" role="alert">
                        @successMessage
                    </div>
                }
            </EditForm>
        </div>
    </div>

    <!-- List of ideas -->
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h3>All Ideas</h3>
            <button class="btn btn-sm btn-outline-primary" @onclick="LoadIdeas" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                }
                else
                {
                    <span>🔄 Refresh</span>
                }
            </button>
        </div>
        <div class="card-body">
            @if (isLoading && ideas.Count == 0)
            {
                <div class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading ideas...</p>
                </div>
            }
            else if (ideas.Count == 0)
            {
                <p class="text-muted text-center py-4">No ideas yet. Create your first idea above!</p>
            }
            else
            {
                <ul class="list-group list-group-flush">
                    @foreach (var idea in ideas)
                    {
                        <li class="list-group-item">
                            <div class="d-flex justify-content-between align-items-start">
                                <div class="ms-2 me-auto flex-grow-1">
                                    <div class="fw-bold">@idea.Title</div>
                                    @if (!string.IsNullOrEmpty(idea.Description))
                                    {
                                        <p class="mb-1 text-muted">@idea.Description</p>
                                    }
                                    @if (idea.Tags.Any())
                                    {
                                        <div class="mt-1">
                                            @foreach (var tag in idea.Tags)
                                            {
                                                <span class="badge bg-secondary me-1">@tag</span>
                                            }
                                        </div>
                                    }
                                </div>
                                <div class="d-flex align-items-start gap-2">
                                    <span class="badge bg-primary rounded-pill" title="Created: @idea.CreatedAt">@GetRelativeTime(idea.CreatedAt)</span>
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => StartEditIdea(idea)" title="Edit">
                                        ✏️
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDeleteIdea(idea)" title="Delete">
                                        🗑️
                                    </button>
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
</div>

<!-- Edit Modal -->
@if (editingIdea != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Idea</h5>
                    <button type="button" class="btn-close" @onclick="CancelEdit"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@editRequest" OnValidSubmit="@HandleUpdateIdea">
                        <div class="mb-3">
                            <label for="editTitle" class="form-label">Title</label>
                            <InputText id="editTitle" class="form-control" @bind-Value="editRequest.Title" placeholder="Enter idea title" />
                        </div>
                        <div class="mb-3">
                            <label for="editDescription" class="form-label">Description</label>
                            <InputTextArea id="editDescription" class="form-control" @bind-Value="editRequest.Description" rows="3" placeholder="Enter idea description" />
                        </div>
                        <div class="mb-3">
                            <label for="editTags" class="form-label">Tags</label>
                            <div class="tags-input-container">
                                <div class="tags-chips">
                                    @if (editRequest.Tags != null)
                                    {
                                        @foreach (var tag in editRequest.Tags)
                                        {
                                            <span class="tag-chip">
                                                @tag
                                                <button type="button" class="tag-remove" @onclick="() => RemoveEditTag(tag)">×</button>
                                            </span>
                                        }
                                    }
                                </div>
                                <input type="text" 
                                       class="form-control mt-2" 
                                       @bind="editCurrentTag" 
                                       @onkeydown="HandleEditTagInput"
                                       placeholder="Type tag and press Enter or comma" />
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(editErrorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                @editErrorMessage
                            </div>
                        }
                        <div class="d-flex gap-2 justify-content-end">
                            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@isUpdating">
                                @if (isUpdating)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Updating...</span>
                                }
                                else
                                {
                                    <span>Update Idea</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (deletingIdea != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the idea "<strong>@deletingIdea.Title</strong>"?</p>
                    <p class="text-muted">This action cannot be undone.</p>
                    @if (!string.IsNullOrEmpty(deleteErrorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @deleteErrorMessage
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="HandleDeleteIdea" disabled="@isDeleting">
                        @if (isDeleting)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Deleting...</span>
                        }
                        else
                        {
                            <span>Delete</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Idea> ideas = new();
    private IdeaCreateRequest newIdea = new();
    private string currentTag = string.Empty;
    private bool isLoading = false;
    private bool isCreating = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    // Edit state
    private Idea? editingIdea = null;
    private IdeaUpdateRequest editRequest = new();
    private string editCurrentTag = string.Empty;
    private bool isUpdating = false;
    private string editErrorMessage = string.Empty;

    // Delete state
    private Idea? deletingIdea = null;
    private bool isDeleting = false;
    private string deleteErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadIdeas();
    }

    private async Task LoadIdeas()
    {
        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();

        try
        {
            ideas = await IdeaService.GetIdeasAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load ideas: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleCreateIdea()
    {
        if (string.IsNullOrWhiteSpace(newIdea.Title))
        {
            errorMessage = "Title is required";
            return;
        }

        isCreating = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();

        try
        {
            var created = await IdeaService.CreateIdeaAsync(newIdea);
            if (created != null)
            {
                successMessage = "Idea created successfully!";
                ResetForm();
                await LoadIdeas();
            }
            else
            {
                errorMessage = "Failed to create idea. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating idea: {ex.Message}";
        }
        finally
        {
            isCreating = false;
            StateHasChanged();
        }
    }

    private void HandleTagInput(KeyboardEventArgs e)
    {
        if ((e.Key == "Enter" || e.Key == ",") && !string.IsNullOrWhiteSpace(currentTag))
        {
            AddTag();
        }
    }

    private void AddTag()
    {
        var trimmedTag = currentTag.Trim().TrimEnd(',');
        if (!string.IsNullOrWhiteSpace(trimmedTag) && !newIdea.Tags.Contains(trimmedTag))
        {
            newIdea.Tags.Add(trimmedTag);
            currentTag = string.Empty;
        }
    }

    private void RemoveTag(string tag)
    {
        newIdea.Tags.Remove(tag);
    }

    private void ResetForm()
    {
        newIdea = new IdeaCreateRequest();
        currentTag = string.Empty;
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }

    private string GetRelativeTime(string createdAt)
    {
        if (string.IsNullOrEmpty(createdAt))
            return "Unknown";

        if (DateTime.TryParse(createdAt, out var date))
        {
            var timeSpan = DateTime.UtcNow - date;
            if (timeSpan.TotalMinutes < 1)
                return "Just now";
            if (timeSpan.TotalMinutes < 60)
                return $"{(int)timeSpan.TotalMinutes}m ago";
            if (timeSpan.TotalHours < 24)
                return $"{(int)timeSpan.TotalHours}h ago";
            if (timeSpan.TotalDays < 30)
                return $"{(int)timeSpan.TotalDays}d ago";
            return date.ToString("MMM dd, yyyy");
        }

        return "Unknown";
    }

    // Edit methods
    private void StartEditIdea(Idea idea)
    {
        editingIdea = idea;
        editRequest = new IdeaUpdateRequest
        {
            Title = idea.Title,
            Description = idea.Description,
            Tags = new List<string>(idea.Tags)
        };
        editCurrentTag = string.Empty;
        editErrorMessage = string.Empty;
    }

    private void CancelEdit()
    {
        editingIdea = null;
        editRequest = new IdeaUpdateRequest();
        editCurrentTag = string.Empty;
        editErrorMessage = string.Empty;
    }

    private async Task HandleUpdateIdea()
    {
        if (editingIdea == null)
            return;

        if (string.IsNullOrWhiteSpace(editRequest.Title))
        {
            editErrorMessage = "Title is required";
            return;
        }

        isUpdating = true;
        editErrorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var updated = await IdeaService.UpdateIdeaAsync(editingIdea.Id, editRequest);
            if (updated != null)
            {
                successMessage = "Idea updated successfully!";
                CancelEdit();
                await LoadIdeas();
            }
            else
            {
                editErrorMessage = "Failed to update idea. Please try again.";
            }
        }
        catch (Exception ex)
        {
            editErrorMessage = $"Error updating idea: {ex.Message}";
        }
        finally
        {
            isUpdating = false;
            StateHasChanged();
        }
    }

    private void HandleEditTagInput(KeyboardEventArgs e)
    {
        if ((e.Key == "Enter" || e.Key == ",") && !string.IsNullOrWhiteSpace(editCurrentTag))
        {
            AddEditTag();
        }
    }

    private void AddEditTag()
    {
        var trimmedTag = editCurrentTag.Trim().TrimEnd(',');
        if (!string.IsNullOrWhiteSpace(trimmedTag))
        {
            if (editRequest.Tags == null)
                editRequest.Tags = new List<string>();
            
            if (!editRequest.Tags.Contains(trimmedTag))
            {
                editRequest.Tags.Add(trimmedTag);
                editCurrentTag = string.Empty;
            }
        }
    }

    private void RemoveEditTag(string tag)
    {
        editRequest.Tags?.Remove(tag);
    }

    // Delete methods
    private void ConfirmDeleteIdea(Idea idea)
    {
        deletingIdea = idea;
        deleteErrorMessage = string.Empty;
    }

    private void CancelDelete()
    {
        deletingIdea = null;
        deleteErrorMessage = string.Empty;
    }

    private async Task HandleDeleteIdea()
    {
        if (deletingIdea == null)
            return;

        isDeleting = true;
        deleteErrorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var success = await IdeaService.DeleteIdeaAsync(deletingIdea.Id);
            if (success)
            {
                successMessage = "Idea deleted successfully!";
                CancelDelete();
                await LoadIdeas();
            }
            else
            {
                deleteErrorMessage = "Failed to delete idea. Please try again.";
            }
        }
        catch (Exception ex)
        {
            deleteErrorMessage = $"Error deleting idea: {ex.Message}";
        }
        finally
        {
            isDeleting = false;
            StateHasChanged();
        }
    }
}

