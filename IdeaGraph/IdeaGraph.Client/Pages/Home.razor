@page "/"
@using IdeaGraph.Client.Models
@using IdeaGraph.Client.Services
@inject IdeaService IdeaService
@inject NavigationManager Navigation
@rendermode InteractiveAuto

<PageTitle>Home - IdeaGraph</PageTitle>

<div class="container-fluid mt-4">
    <!-- Kanban Board -->
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h3>Ideas Kanban Board</h3>
            <button class="btn btn-sm btn-outline-primary" @onclick="LoadIdeas" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                }
                else
                {
                    <span>🔄 Refresh</span>
                }
            </button>
        </div>
        <div class="card-body">
            @if (isLoading && ideas.Count == 0)
            {
                <div class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading ideas...</p>
                </div>
            }
            else if (ideas.Count == 0)
            {
                <p class="text-muted text-center py-4">No ideas yet. Click the "Create New Idea" button above to get started!</p>
            }
            else
            {
                <div class="kanban-board">
                    @foreach (var status in kanbanStatuses)
                    {
                        <div class="kanban-column @(dragOverColumn == status ? "drag-over" : "")"
                             @ondrop="() => HandleDrop(status)"
                             @ondrop:preventDefault
                             @ondragover="() => HandleDragOver(status)"
                             @ondragover:preventDefault
                             @ondragleave="HandleDragLeave"
                             @ondragleave:preventDefault>
                            <div class="kanban-column-header">
                                <span>@status</span>
                                <span class="kanban-column-count">@GetIdeasForStatus(status).Count</span>
                            </div>
                            <div class="kanban-column-body">
                                @{
                                    var statusIdeas = GetIdeasForStatus(status);
                                    if (statusIdeas.Count == 0)
                                    {
                                        <div class="kanban-empty">No ideas</div>
                                    }
                                    else
                                    {
                                        @foreach (var idea in statusIdeas)
                                        {
                                            <div class="kanban-card @(draggingIdea?.Id == idea.Id ? "dragging" : "")"
                                                 draggable="true"
                                                 @ondragstart="() => HandleDragStart(idea)"
                                                 @ondragend="HandleDragEnd">
                                                <div class="kanban-card-title">@idea.Title</div>
                                                <div class="kanban-card-footer">
                                                    <span class="badge bg-primary rounded-pill" title="Created: @idea.CreatedAt">
                                                        @GetRelativeTime(idea.CreatedAt)
                                                    </span>
                                                    <div class="kanban-card-actions">
                                                        <button class="btn btn-sm btn-outline-info" @onclick="() => NavigateToDetail(idea.Id)" title="View Details">
                                                            👁️
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDeleteIdea(idea)" title="Delete">
                                                            🗑️
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                }
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
@if (deletingIdea != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the idea "<strong>@deletingIdea.Title</strong>"?</p>
                    <p class="text-muted">This action cannot be undone.</p>
                    @if (!string.IsNullOrEmpty(deleteErrorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @deleteErrorMessage
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="HandleDeleteIdea" disabled="@isDeleting">
                        @if (isDeleting)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Deleting...</span>
                        }
                        else
                        {
                            <span>Delete</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Idea> ideas = new();
    private bool isLoading = false;
    private string successMessage = string.Empty;

    // Delete state
    private Idea? deletingIdea = null;
    private bool isDeleting = false;
    private string deleteErrorMessage = string.Empty;

    // Kanban state
    private readonly List<string> kanbanStatuses = new() { "New", "Concept", "Specification", "Ready", "Discarded" };
    private Idea? draggingIdea = null;
    private string? dragOverColumn = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadIdeas();
    }

    private async Task LoadIdeas()
    {
        isLoading = true;
        successMessage = string.Empty;
        StateHasChanged();

        try
        {
            var allIdeas = await IdeaService.GetIdeasAsync();
            // Filter out "Implemented" status ideas
            ideas = allIdeas.Where(i => i.Status != "Implemented").ToList();
        }
        catch (Exception)
        {
            // Silently fail - ideas will be empty list
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // Kanban methods
    private List<Idea> GetIdeasForStatus(string status)
    {
        return ideas.Where(i => i.Status == status).ToList();
    }

    private void HandleDragStart(Idea idea)
    {
        draggingIdea = idea;
    }

    private void HandleDragEnd()
    {
        draggingIdea = null;
        dragOverColumn = null;
        StateHasChanged();
    }

    private void HandleDragOver(string status)
    {
        dragOverColumn = status;
    }

    private void HandleDragLeave()
    {
        dragOverColumn = null;
    }

    private async Task HandleDrop(string newStatus)
    {
        dragOverColumn = null;
        
        if (draggingIdea == null || draggingIdea.Status == newStatus)
        {
            draggingIdea = null;
            return;
        }

        var ideaToUpdate = draggingIdea;
        draggingIdea = null;

        try
        {
            var updateRequest = new IdeaUpdateRequest
            {
                Status = newStatus
            };

            var updatedIdea = await IdeaService.UpdateIdeaAsync(ideaToUpdate.Id, updateRequest);
            if (updatedIdea != null)
            {
                // Update the idea in the local list
                var index = ideas.FindIndex(i => i.Id == ideaToUpdate.Id);
                if (index >= 0)
                {
                    ideas[index] = updatedIdea;
                }
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            // Silently fail - idea will stay in original column
        }
    }

    // Navigation methods
    private string GetRelativeTime(string createdAt)
    {
        if (string.IsNullOrEmpty(createdAt))
            return "Unknown";

        if (DateTime.TryParse(createdAt, out var date))
        {
            var timeSpan = DateTime.UtcNow - date;
            if (timeSpan.TotalMinutes < 1)
                return "Just now";
            if (timeSpan.TotalMinutes < 60)
                return $"{(int)timeSpan.TotalMinutes}m ago";
            if (timeSpan.TotalHours < 24)
                return $"{(int)timeSpan.TotalHours}h ago";
            if (timeSpan.TotalDays < 30)
                return $"{(int)timeSpan.TotalDays}d ago";
            return date.ToString("MMM dd, yyyy");
        }

        return "Unknown";
    }

    private void NavigateToDetail(string ideaId)
    {
        Navigation.NavigateTo($"/Idea/{ideaId}");
    }

    private void NavigateToEdit(string ideaId)
    {
        Navigation.NavigateTo($"/Idea/{ideaId}");
    }

    // Delete methods
    private void ConfirmDeleteIdea(Idea idea)
    {
        deletingIdea = idea;
        deleteErrorMessage = string.Empty;
    }

    private void CancelDelete()
    {
        deletingIdea = null;
        deleteErrorMessage = string.Empty;
    }

    private async Task HandleDeleteIdea()
    {
        if (deletingIdea == null)
            return;

        isDeleting = true;
        deleteErrorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var success = await IdeaService.DeleteIdeaAsync(deletingIdea.Id);
            if (success)
            {
                successMessage = "Idea deleted successfully!";
                CancelDelete();
                await LoadIdeas();
            }
            else
            {
                deleteErrorMessage = "Failed to delete idea. Please try again.";
            }
        }
        catch (Exception ex)
        {
            deleteErrorMessage = $"Error deleting idea: {ex.Message}";
        }
        finally
        {
            isDeleting = false;
            StateHasChanged();
        }
    }
       

    // Status badge helper (kept for potential future use)
    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "New" => "bg-info",
            "Concept" => "bg-primary",
            "Specification" => "bg-warning text-dark",
            "Ready" => "bg-success",
            "Implemented" => "bg-success",
            "Discarded" => "bg-secondary",
            _ => "bg-secondary"
        };
    }
}

