@page "/Idea/{Id}"
@page "/Ideas/{Id}"
@using IdeaGraph.Client.Models
@using IdeaGraph.Client.Services
@inject IdeaService IdeaService
@inject NavigationManager Navigation
@rendermode InteractiveAuto

<PageTitle>@(isCreating ? "New Idea" : idea?.Title ?? "Idea Details") - IdeaGraph</PageTitle>

<div class="container-fluid mt-4">
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading idea...</p>
        </div>
    }
    else if (idea == null && !isCreating)
    {
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">Idea not found</h4>
            <p>The requested idea could not be found.</p>
            <hr>
            <button class="btn btn-primary" @onclick="NavigateToHome">Go to Home</button>
        </div>
    }
    else if (!isEditing)
    {
        <!-- View Mode -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2>@idea.Title</h2>
            <div class="d-flex gap-2">
                <button class="btn btn-secondary" @onclick="NavigateToHome">
                    ‚Üê Back to List
                </button>
                <button class="btn btn-info" @onclick="ConfirmEnhanceIdea" title="Enhance with AI">
                    ü§ñ AI Enhance
                </button>
                <button class="btn btn-primary" @onclick="StartEdit">
                    ‚úèÔ∏è Edit
                </button>
            </div>
        </div>

        <div class="card mb-3">
            <div class="card-body">            
                @if (!string.IsNullOrEmpty(idea.Description))
                {
                    <div class="description-content text-white">
                        @((MarkupString)idea.Description)
                    </div>
                }
                else
                {
                    <p class="text-muted">No description provided.</p>
                }
            </div>
        </div>

        @if (idea.Tags.Any())
        {
            <div class="card mb-3">
                <div class="card-body">
                    <h5 class="card-title">Tags</h5>
                    <div>
                        @foreach (var tag in idea.Tags)
                        {
                            <span class="badge bg-secondary me-1">@tag</span>
                        }
                    </div>
                </div>
            </div>
        }

        <div class="card mb-3">
            <div class="card-body">
                <h5 class="card-title">Status</h5>
                <span class="badge @GetStatusBadgeClass(idea.Status)">@idea.Status</span>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Metadata</h5>
                <p class="mb-0"><strong>Created:</strong> @idea.CreatedAt</p>
                <p class="mb-0"><strong>ID:</strong> @idea.Id</p>
            </div>
        </div>
    }
    else
    {
        <!-- Edit Mode -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>@(isCreating ? "Create New Idea" : "Edit Idea")</h1>
            <div class="d-flex gap-2">
                <button class="btn btn-secondary" @onclick="CancelEdit">
                    Cancel
                </button>
            </div>
        </div>

        <EditForm Model="@editRequest" OnValidSubmit="@HandleUpdate">
            <div class="card mb-3">
                <div class="card-body">
                    <div class="mb-3">
                        <label for="title" class="form-label">Title</label>
                        <InputText id="title" class="form-control" @bind-Value="editRequest.Title" placeholder="Enter idea title" />
                    </div>
                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <Editor Id="description" 
                                @bind-Value="editRequest.Description"
                                Field="@(() => editRequest.Description)"
                                ApiKey="ommjaew9ko96e2kzfsag3kz1fixxl156qbibmaawx9eeqek3"
                                Conf="@editorConf" />
                    </div>
                    <div class="mb-3">
                        <label for="tags" class="form-label">Tags</label>
                        <div class="tags-input-container">
                            <div class="tags-chips">
                                @if (editRequest.Tags != null)
                                {
                                    @foreach (var tag in editRequest.Tags)
                                    {
                                        <span class="tag-chip">
                                            @tag
                                            <button type="button" class="tag-remove" @onclick="() => RemoveTag(tag)">√ó</button>
                                        </span>
                                    }
                                }
                            </div>
                            <input type="text" 
                                   class="form-control mt-2" 
                                   @bind="currentTag" 
                                   @onkeydown="HandleTagInput"
                                   placeholder="Type tag and press Enter or comma" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="status" class="form-label">Status</label>
                        <InputSelect id="status" class="form-select" @bind-Value="editRequest.Status">
                            <option value="New">New</option>
                            <option value="Concept">Concept</option>
                            <option value="Specification">Specification</option>
                            <option value="Ready">Ready</option>
                            <option value="Implemented">Implemented</option>
                            <option value="Discarded">Discarded</option>
                        </InputSelect>
                    </div>
                </div>
            </div>

            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-primary" disabled="@isUpdating">
                    @if (isUpdating)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>@(isCreating ? "Creating..." : "Updating...")</span>
                    }
                    else
                    {
                        <span>@(isCreating ? "Create Idea" : "Save Changes")</span>
                    }
                </button>
                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @errorMessage
                </div>
            }
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success mt-3" role="alert">
                    @successMessage
                </div>
            }
        </EditForm>
    }
</div>

<!-- AI Enhancement Confirmation Modal -->
@if (showEnhanceModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">ü§ñ AI Enhancement Confirmation</h5>
                    <button type="button" class="btn-close" @onclick="CancelEnhance"></button>
                </div>
                <div class="modal-body">
                    <p>The AI will:</p>
                    <ul>
                        <li>Improve the description (spelling, grammar, formulation)</li>
                        <li><strong>Replace all existing tags</strong> with 5 AI-generated tags</li>
                    </ul>
                    <p class="text-warning"><strong>Warning:</strong> This action will overwrite your current description and tags. This cannot be undone.</p>
                    @if (!string.IsNullOrEmpty(enhanceErrorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @enhanceErrorMessage
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelEnhance">Cancel</button>
                    <button type="button" class="btn btn-info" @onclick="HandleEnhanceIdea" disabled="@isEnhancing">
                        @if (isEnhancing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Enhancing...</span>
                        }
                        else
                        {
                            <span>ü§ñ Enhance with AI</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    private Idea? idea;
    private bool isLoading = true;
    private bool isEditing = false;
    private bool isCreating = false;
    private bool isUpdating = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    // AI Enhancement state
    private bool showEnhanceModal = false;
    private bool isEnhancing = false;
    private string enhanceErrorMessage = string.Empty;

    private IdeaUpdateRequest editRequest = new();
    private string currentTag = string.Empty;

    private Dictionary<string, object> editorConf = new Dictionary<string, object>
    {
            {"toolbar", "link | undo redo | bold italic | alignleft aligncenter alignright | bullist numlist | code codesample searchreplace fullscreen emoticons"},
            {"plugins", "lists advlist link image table code charmap autolink codesample link searchreplace fullscreen emoticons"},
            {"height", "525"},
            {"width", "977"},
            {"license_key", "ommjaew9ko96e2kzfsag3kz1fixxl156qbibmaawx9eeqek3"}
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadIdea();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Reset state when navigating to a different idea or creating new
        isEditing = false;
        isCreating = false;
        idea = null;
        editRequest = new();
        currentTag = string.Empty;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        
        await LoadIdea();
    }

    private async Task LoadIdea()
    {
        // If Id is "new", we're creating a new idea
        if (Id.Equals("new", StringComparison.OrdinalIgnoreCase))
        {
            isLoading = false;
            isCreating = true;
            isEditing = true;
            editRequest = new IdeaUpdateRequest
            {
                Title = string.Empty,
                Description = string.Empty,
                Tags = new List<string>(),
                Status = "New"
            };
            StateHasChanged();
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            idea = await IdeaService.GetIdeaAsync(Id);
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load idea: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void StartEdit()
    {
        if (idea == null) return;

        editRequest = new IdeaUpdateRequest
        {
            Title = idea.Title,
            Description = idea.Description,
            Tags = new List<string>(idea.Tags),
            Status = idea.Status
        };
        isEditing = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }

    private void CancelEdit()
    {
        isEditing = false;
        editRequest = new();
        currentTag = string.Empty;
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }

    private async Task HandleUpdate()
    {
        if (string.IsNullOrWhiteSpace(editRequest.Title))
        {
            errorMessage = "Title is required";
            return;
        }

        isUpdating = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();

        try
        {
            if (isCreating)
            {
                // Creating a new idea
                var createRequest = new IdeaCreateRequest
                {
                    Title = editRequest.Title ?? string.Empty,
                    Description = editRequest.Description ?? string.Empty,
                    Tags = editRequest.Tags ?? new List<string>(),
                    Status = editRequest.Status ?? "New"
                };
                
                var created = await IdeaService.CreateIdeaAsync(createRequest);
                if (created != null)
                {
                    successMessage = "Idea created successfully!";
                    await Task.Delay(1000); // Show success message briefly
                    Navigation.NavigateTo($"/Idea/{created.Id}");
                }
                else
                {
                    errorMessage = "Failed to create idea. Please try again.";
                }
            }
            else
            {
                // Updating existing idea
                var updated = await IdeaService.UpdateIdeaAsync(Id, editRequest);
                if (updated != null)
                {
                    successMessage = "Idea updated successfully!";
                    idea = updated;
                    isEditing = false;
                    await Task.Delay(1000); // Show success message briefly
                    successMessage = string.Empty;
                }
                else
                {
                    errorMessage = "Failed to update idea. Please try again.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error {(isCreating ? "creating" : "updating")} idea: {ex.Message}";
        }
        finally
        {
            isUpdating = false;
            StateHasChanged();
        }
    }

    private void HandleTagInput(KeyboardEventArgs e)
    {
        if ((e.Key == "Enter" || e.Key == ",") && !string.IsNullOrWhiteSpace(currentTag))
        {
            AddTag();
        }
    }

    private void AddTag()
    {
        var trimmedTag = currentTag.Trim().TrimEnd(',');
        if (!string.IsNullOrWhiteSpace(trimmedTag))
        {
            if (editRequest.Tags == null)
            {
                editRequest.Tags = new List<string>();
            }
            
            if (!editRequest.Tags.Contains(trimmedTag))
            {
                editRequest.Tags.Add(trimmedTag);
                currentTag = string.Empty;
            }
        }
    }

    private void RemoveTag(string tag)
    {
        if (editRequest.Tags != null)
        {
            editRequest.Tags.Remove(tag);
        }
    }

    private void NavigateToHome()
    {
        Navigation.NavigateTo("/");
    }

    // Status badge helper
    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "New" => "bg-info",
            "Concept" => "bg-primary",
            "Specification" => "bg-warning text-dark",
            "Ready" => "bg-success",
            "Implemented" => "bg-success",
            "Discarded" => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    // AI Enhancement methods
    private void ConfirmEnhanceIdea()
    {
        if (idea == null || string.IsNullOrWhiteSpace(idea.Description))
        {
            errorMessage = "Cannot enhance: Idea has no description.";
            return;
        }
        
        showEnhanceModal = true;
        enhanceErrorMessage = string.Empty;
    }

    private void CancelEnhance()
    {
        showEnhanceModal = false;
        enhanceErrorMessage = string.Empty;
    }

    private async Task HandleEnhanceIdea()
    {
        if (idea == null)
            return;

        isEnhancing = true;
        enhanceErrorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var enhanced = await IdeaService.EnhanceIdeaAsync(Id);
            if (enhanced != null)
            {
                successMessage = "Idea enhanced successfully with AI!";
                idea = enhanced;
                showEnhanceModal = false;
                await Task.Delay(2000); // Show success message
                successMessage = string.Empty;
            }
            else
            {
                enhanceErrorMessage = "Failed to enhance idea. Please try again.";
            }
        }
        catch (Exception ex)
        {
            enhanceErrorMessage = $"Error enhancing idea: {ex.Message}";
        }
        finally
        {
            isEnhancing = false;
            StateHasChanged();
        }
    }
}
