@page "/graph"
@rendermode InteractiveAuto
@implements IAsyncDisposable
@inject IdeaService IdeaService
@inject RelationService RelationService
@inject IJSRuntime JSRuntime
@using IdeaGraph.Client.Models
@using IdeaGraph.Client.Services

<PageTitle>Graph - IdeaGraph</PageTitle>

<div class="container-fluid mt-4">
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h3>Idea Graph</h3>
            <div>
                <button class="btn btn-sm btn-outline-primary me-2" @onclick="FitToView" disabled="@(!_isLoaded)">
                    <i class="bi bi-arrows-angle-expand"></i> Fit to View
                </button>
                <button class="btn btn-sm btn-outline-primary" @onclick="ResetZoom" disabled="@(!_isLoaded)">
                    <i class="bi bi-arrow-clockwise"></i> Reset Zoom
                </button>
            </div>
        </div>
        <div class="card-body p-0">
            @if (_isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="text-muted mt-2">Loading graph data...</p>
                </div>
            }
            else if (_errorMessage != null)
            {
                <div class="alert alert-danger m-4" role="alert">
                    <i class="bi bi-exclamation-triangle-fill"></i> @_errorMessage
                </div>
            }
            else if (_ideas.Count == 0)
            {
                <div class="text-center py-5">
                    <p class="text-muted">No ideas found to display in the graph.</p>
                    <p class="text-muted mt-2">Create some ideas first to see them visualized here.</p>
                </div>
            }
            else
            {
                <div id="cy" style="width: 100%; height: 700px;"></div>
                <div class="p-3 bg-light border-top">
                    <div class="mb-3">
                        <strong>Status Legend:</strong>
                        <div class="d-flex flex-wrap mt-2">
                            <span class="me-3 mb-2">
                                <span class="badge" style="background-color: #6366f1;">New</span>
                            </span>
                            <span class="me-3 mb-2">
                                <span class="badge" style="background-color: #8b5cf6;">Concept</span>
                            </span>
                            <span class="me-3 mb-2">
                                <span class="badge" style="background-color: #3b82f6;">Specification</span>
                            </span>
                            <span class="me-3 mb-2">
                                <span class="badge" style="background-color: #10b981;">Ready</span>
                            </span>
                            <span class="me-3 mb-2">
                                <span class="badge" style="background-color: #059669;">Implemented</span>
                            </span>
                            <span class="me-3 mb-2">
                                <span class="badge" style="background-color: #6b7280;">Discarded</span>
                            </span>
                        </div>
                    </div>
                    <div>
                        <strong>Relation Types:</strong>
                        <div class="d-flex flex-wrap mt-2">
                            <span class="me-3 mb-2"><span class="badge bg-danger">depends_on</span></span>
                            <span class="me-3 mb-2"><span class="badge bg-success">extends</span></span>
                            <span class="me-3 mb-2"><span class="badge bg-warning">contradicts</span></span>
                            <span class="me-3 mb-2"><span class="badge" style="background-color: #8b5cf6;">synergizes_with</span></span>
                        </div>
                    </div>
                    <small class="text-muted mt-2 d-block">
                        <i class="bi bi-info-circle"></i> Click on a node to view idea details
                    </small>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Idea> _ideas = new();
    private List<Relation> _allRelations = new();
    private bool _isLoading = true;
    private bool _isLoaded = false;
    private bool _dataLoaded = false;
    private bool _initializationAttempted = false;
    private string? _errorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadGraphData();
        }
        else if (_dataLoaded && !_isLoaded && !_initializationAttempted)
        {
            // Initialize Cytoscape after the cy div has been rendered
            // Only attempt once to prevent infinite loops
            _initializationAttempted = true;
            await InitializeCytoscape();
        }
    }

    private async Task LoadGraphData()
    {
        try
        {
            _isLoading = true;
            _errorMessage = null;
            StateHasChanged();

            // Load all ideas
            _ideas = await IdeaService.GetIdeasAsync();

            if (_ideas.Count == 0)
            {
                _isLoading = false;
                StateHasChanged();
                return;
            }

            // Load all relations for all ideas
            var relationTasks = _ideas.Select(idea => RelationService.GetRelationsAsync(idea.Id));
            var relationsResults = await Task.WhenAll(relationTasks);

            // Flatten and deduplicate relations
            _allRelations = relationsResults
                .SelectMany(r => r)
                .GroupBy(r => r.Id)
                .Select(g => g.First())
                .ToList();

            _isLoading = false;
            _dataLoaded = true;
            StateHasChanged();

            // StateHasChanged will trigger OnAfterRenderAsync where Cytoscape will be initialized
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to load graph data: {ex.Message}";
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task InitializeCytoscape()
    {
        try
        {
            // Define status colors
            var statusColors = new Dictionary<string, string>
            {
                { "New", "#6366f1" },           // Indigo
                { "Concept", "#8b5cf6" },       // Purple
                { "Specification", "#3b82f6" }, // Blue
                { "Ready", "#10b981" },         // Green
                { "Implemented", "#059669" },   // Dark Green
                { "Discarded", "#6b7280" }      // Gray
            };

            // Prepare nodes with status colors
            var nodes = _ideas.Select(idea => new
            {
                data = new
                {
                    id = idea.Id,
                    label = idea.Title,
                    status = idea.Status,
                    color = statusColors.ContainsKey(idea.Status) 
                        ? statusColors[idea.Status] 
                        : statusColors["New"]
                }
            }).ToList();

            // Create a set of valid node IDs for fast lookup
            var validNodeIds = new HashSet<string>(_ideas.Select(i => i.Id));

            // Filter edges to only include those with valid source and target nodes
            // This prevents Cytoscape errors when relations reference non-existent ideas
            var edges = _allRelations
                .Where(relation => 
                    validNodeIds.Contains(relation.SourceId) && 
                    validNodeIds.Contains(relation.TargetId))
                .Select(relation => new
                {
                    data = new
                    {
                        id = relation.Id,
                        source = relation.SourceId,
                        target = relation.TargetId,
                        label = relation.RelationType.Replace("_", " "),
                        relationType = relation.RelationType
                    }
                })
                .ToList();

            // Combine nodes and edges
            var elements = new
            {
                nodes = nodes,
                edges = edges
            };

            // Call JavaScript interop to initialize Cytoscape
            _isLoaded = await JSRuntime.InvokeAsync<bool>("cytoscapeInterop.initializeCytoscape", "cy", elements);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to initialize graph: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task FitToView()
    {
        if (_isLoaded)
        {
            await JSRuntime.InvokeVoidAsync("cytoscapeInterop.fitToView");
        }
    }

    private async Task ResetZoom()
    {
        if (_isLoaded)
        {
            await JSRuntime.InvokeVoidAsync("cytoscapeInterop.resetZoom");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_isLoaded)
        {
            await JSRuntime.InvokeVoidAsync("cytoscapeInterop.destroy");
        }
    }
}

